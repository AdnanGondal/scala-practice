[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(retcalc.InflationDataSpec, org.scalatest.tools.Framework$$anon$1@429aa31d, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(retcalc.EquityDataSpec, org.scalatest.tools.Framework$$anon$1@429aa31d, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(retcalc.RetCalcSpec, org.scalatest.tools.Framework$$anon$1@429aa31d, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(retcalc.ReturnsSpec, org.scalatest.tools.Framework$$anon$1@429aa31d, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(retcalc.SimulatePlanIT, org.scalatest.tools.Framework$$anon$1@429aa31d, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32mReturnsSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mVariableReturns.fromUntil[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should keep only a window of the returns[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mReturns.monthRate[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a fixed rate for a fixed return[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return the nth rate for VariableReturn[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should roll over from the first rate if n > length[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return the n+offset th rate for OffsetReturn[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mReturns.fromEquityAndInflationData[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should compute real total returns from equity and inflation data[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEquityDataSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEquityData.fromResource[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should load market data from a tsv file[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEquityData.monthlyDividend[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return a monthly dividend[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mInflationDataSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mInflationData.fromResource[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should load CPI data from a tsv file[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSimulatePlanIT:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSimulatePlanApp.strMain[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should simulate a retirement plan using market returns[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mRetCalcSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mRetCalc.futureCapital[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate the amount of savings I will have in n months[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mRetCalc.futureCapital[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate how much savings will be left after having taken a pension for n months[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mRetCalc.nbOfMonthsSaving[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate how long I need to save before I can retire[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should not crash if the resulting nbOfMonths is very high[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should not loop forever if I enter bad parameters[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  should RetCalc.simulatePlan[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should calculate the capital at retirement and the capital after death[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m  - should use different returns for capitalisation and drawdown[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 1 second, 5 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 17[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 5, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 17, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	retcalc.InflationDataSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	retcalc.EquityDataSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	retcalc.RetCalcSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	retcalc.ReturnsSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	retcalc.SimulatePlanIT[0m
